@startuml
interface GraphAlgoInterface{
        -def get_graph(self) -> GraphInterface:
        -def load_from_json(self, file_name: str) -> bool:
        -def save_to_json(self, file_name: str) -> bool:
        -def shortest_path(self, id1: int, id2: int) -> (float, list):
        -def TSP(self, node_lst: List[int]) -> (List[int], float):
        -def centerPoint(self) -> (int, float):
        -def plot_graph(self) -> None:
    }
    interface GraphInterface{
        -def v_size(self) -> int:
        -def e_size(self) -> int:
        -def get_all_v(self) -> dict:
        -def all_in_edges_of_node(self, id1: int) -> dict:
        -def all_out_edges_of_node(self, id1: int) -> dict:
        -def add_edge(self, id1: int, id2: int, weight: float) -> bool:
        -def add_node(self, node_id: int, pos: tuple = None) -> bool:
        -def remove_node(self, node_id: int) -> bool:
        -def remove_edge(self, node_id1: int, node_id2: int) -> bool:
    }

    class DiGraph implements GraphInterface {
        +self.nodes
        +self.num_nodes
        +self.num_edges
        +self.mc
        -def v_size(self) -> int:
        -def e_size(self) -> int:
        -def get_all_v(self) -> dict:
        -def all_in_edges_of_node(self, id1: int) -> dict:
        -def all_out_edges_of_node(self, id1: int) -> dict:
        -def add_edge(self, id1: int, id2: int, weight: float) -> bool:
        -def add_node(self, node_id: int, pos: tuple = None) -> bool:
        -def remove_node(self, node_id: int) -> bool:
        -def remove_edge(self, node_id1: int, node_id2: int) -> bool:
}

class GraphAlgo implements GraphAlgoInterface{
        +self.graph = graph

        -def get_graph(self) -> GraphInterface:
        -def load_from_json(self, file_name: str) -> bool:
        -def save_to_json(self, file_name: str) -> bool:
        -def shortest_path(self, id1: int, id2: int) -> (float, list):
        -def TSP(self, node_lst: List[int]) -> (List[int], float):
        -def centerPoint(self) -> (int, float):
        -def plot_graph(self) -> None:
        -def random_pos(self) -> tuple:
        -def to_json_file(self):
        -def dijkstra_algo(self, src: int):
        -def max_dist(self, src):
        -def dfs(self, node : Node) -> None:se(self):
        -def set_tags_weigth(self) -> None:
        -def is_connected(self):
    }
class Node{
        +self.pos = pos
        +self.id = id
        +self.in_edges = {}
        +self.out_edges = {}
        +self.tag = -1
        +self.weight = 0.0
        +self.info = 'w'
}
GraphAlgo -> DiGraph
DiGraph -> Node

@enduml